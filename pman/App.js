import React, { useState, useEffect } from "react"
import "./App.css"

var mqtt = require("mqtt")

function App() {
  function pm25_sceen (message_json){
    setValue_pm25  (message_json['data']['pm25'])
  }

  function social_sceen (message_json){
    setValue_social_text  (message_json['data']['text'])
  }

  function check_temporhum(message_json){
    var Value_temp = message_json['data']['temp']
    var Value_Hum = message_json['data']['humid']
    setValue_Hum (message_json['data']['humid'])
    cal_realfeel(Value_temp,Value_Hum)
    
    if (Value_temp_calfeel >= 0) {
      setColor("white")
      setStatus("‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ß‡πÇ‡∏•‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡∏ö‡∏∂‡πã‡∏¢‡∏¢‡∏¢‡∏¢")
      setEmoji("ü•∂")
      
    } if (Value_temp_calfeel >= 20) {
      setColor("#AAD062")
      setStatus("‡∏´‡∏ô‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡πÄ‡∏Ç‡πá‡∏á‡πÄ‡πÄ‡∏•‡πâ‡∏ß")
      setEmoji("üòÜ")
     
    } if (Value_temp_calfeel >= 25) {
      setColor("#F8D45D")
      setStatus("‡πÄ‡∏¢‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏µ")
      setEmoji("üòä")
     
    } if (Value_temp_calfeel >= 30) {
      setColor("#FB9A51")
      setStatus("‡∏£‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢")
      setEmoji("üòï")
      
    } if (Value_temp_calfeel >= 35) {
      setColor("#F76669")
      setStatus("‡∏Ç‡∏≠‡∏£‡πà‡∏°‡∏ó‡∏µ ‡∏£‡πâ‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏ß")
      setEmoji("üòñ")
      
    } 
    return true
  }

  //‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏ì‡∏†‡∏π‡∏°‡∏¥‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ
  function cal_realfeel(t,h) {
    var h = 0
    var tf = (t*9/5) + 32;
    var realfeel = 0
    var realfeel = (-42.379) + (2.04901523 * tf) + (10.14333127 * h) - (0.22475541 * tf * h) - (6.83783 * Math.pow(10, -3) * Math.pow(tf, 2)) - (5.481717 * Math.pow(10, -2) * Math.pow(h, 2)) + (1.22874 * Math.pow(10, -3) * Math.pow(tf, 2) * h) + (8.5282 * Math.pow(10, -4) * tf * Math.pow(h, 2)) - (1.99 * Math.pow(10, -6) * Math.pow(tf, 2) * Math.pow(h, 2));
    var realfeel = parseFloat((realfeel - 32) / 1.80).toFixed( 1 );
    setValue_temp_cal(t)
    setValue_temp_calfeel(realfeel)
    return true
  }

  function check_type_message(topic,message){
    var message_json = {}
    //‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
    if (topic != " " && message != " " ){

      //‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà string ‡πÉ‡∏ä‡πà‡πÉ‡∏´‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡∏Å‡πá‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÄ‡πÄ‡∏ö‡∏ö ofject ‡∏≠‡∏¢‡∏π‡πà‡∏î‡∏µ ‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏±‡∏Å‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ß
      if(typeof(message) == "object"){
        message = message.toString()

        //‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô json ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô false ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        try{
          
            message_json = message.trim()
            message_json = message_json.replace(/'/g,'"')
            message_json =  JSON.parse(message_json)
            setPayload({ topic, message: message_json })
            // setValue_temp (parseFloat(message_json['t']))
            // setValue_Hum (parseFloat(message_json['h']))
            if (message_json['type'] == "weather"){
              check_temporhum(message_json)
            }
            if (message_json['type'] == "pm25"){
              pm25_sceen (message_json)
            }
            if (message_json['type'] == "social"){
              social_sceen(message_json)
            }
            
        }
        catch{
          setmessage_string(message)
        }
        // setPayload({ topic, message: message_json })
        // setValue_temp (parseFloat(message_json['t']))
        // setValue_Hum (parseFloat(message_json['h']))
        }

    }
  }
  
  const [message_string, setmessage_string] = useState("")
  const [Value_social_text, setValue_social_text] = useState("")
  const [Value_pm25, setValue_pm25] = useState(-1)
  const [Value_temp, setValue_temp] = useState(-1)
  const [Value_Hum, setValue_Hum] = useState(-1)
  const [Value_temp_cal, setValue_temp_cal] = useState(-1)
  const [Value_temp_calfeel, setValue_temp_calfeel] = useState(-1)
  const [payload, setPayload] = useState({})
  const [color, setColor] = useState("#A3DA8D")
  const [status, setStatus] = useState("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
  const [emoji, setEmoji] = useState("")
  const [ms, setms] = useState("")
  const subTopic = "e775b1245d94ea4a79be6ce40cf96929"
  const broker = "hivemq"
  var client = mqtt.connect("ws://broker.hivemq.com:8000/mqtt",options)
  var options={
      retain:true,
      qos:1,
      clientId:"mqttjs01",
      clean:true};

  client.subscribe(subTopic)
  client.on("message", function (topic, message) {
    //‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡πÄ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string 
    // message = message.toString()
    console.log(message)
    console.log(typeof(message))
    check_type_message(topic,message)
    // if (message != " " ){
    //   if(typeof(message) == "object"){
    //   message = message.toString()
    //   message = message.trim()
    //   message = message.replace(/'/g,'"')
    //   // setValue(parseFloat(message))
    //   message =  JSON.parse(message)
    //   setPayload({ topic, message: message })
    //   setValue_temp (parseFloat(message['t']))
    //   setValue_Hum (parseFloat(message['h']))
    //   }
    // }
    // setValue(parseFloat(ms['t']))
  })
  
  //‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô [xxx] ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡πÄ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ...
  // useEffect(() => {
  //   check_temporhum(Value_temp,Value_Hum)
  // }, [Value_temp])

  // useEffect(() => {
  //   check_temporhum(Value_temp,Value_Hum)
  // }, [Value_Hum])


  //‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
  return (
    <div className="App">
      <header className="App-header">
        <h2>Subscribe Topic: {`${subTopic}`}</h2>
        <h3>Broker: {`${broker}`} </h3>
        <p>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤: {message_string}</p>
        
        <div className="show" >
          <div className="temp_box" >
            <h5 style={{ margin: 0 }}>‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: {Value_temp_cal} ¬∞C</h5>
            <br></br>
            <h5 style={{ margin: 0 }}>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á: {Value_temp_calfeel} ¬∞C</h5>
          </div>
          <div className="hum_box" >
            <h5 style={{ margin: 0 }}>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: {Value_Hum} %</h5>
            <br></br>
            <h5 style={{ margin: 0 }}>PM2.5: {Value_pm25} AQI</h5>
          </div>
          <div className="rcorners" style={{ background: color }}>
            <h4 style={{ margin: 0 }}>{status}</h4>
            {/* <h5 style={{ margin: 0 }}>‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: {Value_temp_cal} ¬∞C ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á: {Value_Hum_cal} ¬∞C</h5> */}
            <br></br>
            <div className="emoji_layout" >{emoji}</div>
          </div>
          <div className="Text_box" >
            <div className="social_layout" style={{ margin: 0 }}>{Value_social_text}</div>
          </div>
          <p>json Payload: {JSON.stringify(payload)}</p>
        </div>
      </header>
    </div>
  )
}

export default App;